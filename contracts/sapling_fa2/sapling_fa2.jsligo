type storage = {
  state: sapling_state<8>,
  fa2_contract: address,
  token_id: nat,
};

type parameter = list<sapling_transaction<8>>;

type fa2_transaction =
// @layout comb
{
  to_: address,
  token_id: nat,
  amount: nat,
};

type fa2_transfer =
// @layout comb
{
  from_: address,
  txs: list<fa2_transaction>,
};

type fa2_parameter = list<fa2_transfer>;

type return_ = [list<operation>, storage];

type requests = [list<[address, nat]>, map<address, nat>, storage];

type loop_els = [requests, sapling_transaction<8>];

const main = ([tx_list, s]: [parameter, storage]): return_ => {
  // contract must fail if an amount of tez is transferred
  if (Tezos.get_amount() > (0 as tez)) {
    return failwith("UNEXPECTED_XTZ_AMOUNT");
  }

  const [unshielding_reqs, shielding_reqs, new_state]: requests =
    List.fold(([[unshielding_reqs, shielding_reqs, storage], tx]: loop_els) =>
      match(Tezos.sapling_verify_update(tx, storage.state), {
        None: () => { return failwith("INVALID_SAPLING_TX") },
        Some: (verifiedData) => {
          const [bound_data, [tx_balance, new_sapling_state]]: [bytes, [int, sapling_state<8>]] = verifiedData;

          // If the balance is strictly positive (i.e. unshielding), we send
          // funds to the given address.
          if (tx_balance > 0) {
            return match(Bytes.unpack(bound_data) as option<key_hash>, {
              None: () => { return failwith("UNABLE_TO_UNPACK_RECIPIENT") },
              Some: (recipient_key_hash: key_hash) => {
                const recipient = Tezos.address(Tezos.implicit_account(recipient_key_hash));
                const data = [recipient, abs(tx_balance)];
                return [
                  list([data, ...unshielding_reqs]),
                  shielding_reqs,
                  { ...storage, state: new_sapling_state }
                ];
              }
            });
          } else if (tx_balance < 0) {
            // If the balance is negative, the contract receives the tokens (shielding)
            return match(Bytes.unpack(bound_data) as option<key_hash>, {
              Some: (_) => { return failwith("UNEXPECTED_RECIPIENT"); },
              None: () => {
                return [
                  unshielding_reqs,
                  Map.update(Tezos.get_sender(), Some(abs(tx_balance)), shielding_reqs),
                  { ...storage, state: new_sapling_state }
                ];
              }
            });
          } else {
            // If the balance is zero (Sapling transfer)
            return [
              unshielding_reqs,
              shielding_reqs,
              { ...storage, state: new_sapling_state }
            ];
          }
        }
      }),
      tx_list,
      [list([]), Map.empty, s] as requests
    );

  // creates the transfers
  const op: operation =
    match(Tezos.get_entrypoint_opt("%transfer", s.fa2_contract), {
      None: () => { return failwith("%TRANFER_DOESNT_EXIST") },
      Some: contract => {
        const transfers_to: fa2_parameter =
          Map.fold(([transfers, req]: [fa2_parameter, [address, nat]]) => {
            const param: fa2_transfer = {
              from_: req[0],
              txs: list([{
                to_: Tezos.get_self_address(),
                token_id: s.token_id,
                amount: req[1],
              }])
            };
            return list([param, ...transfers]);
          }, shielding_reqs, list([]));

        const transfers_from: list<fa2_transaction> =
          List.map((req: [address, nat]) => {
            return {
              to_: req[0],
              amount: req[1],
              token_id: s.token_id,
            };
          }, unshielding_reqs);

        const transfers: fa2_parameter = list([
          {
            from_: Tezos.get_self_address(),
            txs: transfers_from,
          },
          ...transfers_to
        ]);

        return Tezos.transaction(transfers, 0 as tez, contract);
      }
    });

  return [list([op]), new_state];
}

type storage = {
  state: sapling_state<8>,
  fa1_2_contract: address,
};

type parameter = list<sapling_transaction<8>>;

type fa1_2_parameter =
// @layout comb
{
  /* @annot from */from_: address,
  /* @annot to */ to_: address,
  value: nat,
};

type return_ = [list<operation>, storage];

const main = ([tx_list, s]: [parameter, storage]) : return_ => {
    // contract must fail if an amount of tez is transferred
    if (Tezos.get_amount() > (0 as tez)) {
      return failwith("UNEXPECTED_XTZ_AMOUNT")
    }

    return match(Tezos.get_entrypoint_opt("%transfer", s.fa1_2_contract) as option<contract<fa1_2_parameter>>, {
      None: () => { return failwith("%TRANSFER_DOESNT_EXIST") },
      Some: contract => List.fold(([[ops, storage], tx]: [[list<operation>, storage], sapling_transaction<8>]) =>
        match(Tezos.sapling_verify_update(tx, storage.state), {
          None: () => { return failwith("INVALID_SAPLING_TX") },
          Some: (verifiedData) => {
            const [bound_data, [tx_balance, new_sapling_state]]: [bytes, [int, sapling_state<8>]] = verifiedData;
            // If the balance is strictly positive (i.e. unshielding), we send
            // funds to the given address.
            if (tx_balance > 0) {
              return match(Bytes.unpack(bound_data) as option<key_hash>, {
                None: () => { return failwith("UNABLE_TO_UNPACK_RECIPIENT") },
                Some: (recipient_key_hash: key_hash) => {
                  const recipient = Tezos.address(Tezos.implicit_account(recipient_key_hash));
                  const param = {
                    from_: Tezos.get_self_address(),
                    to_:  recipient,
                    value: abs(tx_balance),
                  };
                  return [
                    list([Tezos.transaction(param, 0 as tez, contract), ...ops]),
                    { ...storage, state: new_sapling_state }
                  ];
                }
              });
            }

            // no implicit account is expected in the bound data
            return match(Bytes.unpack(bound_data) as option<key_hash>, {
              Some: (_) => { return failwith("UNEXPECTED_RECIPIENT"); },
              None: () => {
                if (tx_balance < 0) {
                  // If the balance is negative, the contract receives the tokens (shielding)
                  const param = {
                    from_: Tezos.get_sender(),
                    to_: Tezos.get_self_address(),
                    value: abs(tx_balance),
                  };
                  return [
                    list([Tezos.transaction(param, 0 as tez, contract), ...ops]),
                    { ...storage, state: new_sapling_state }
                  ];
                }
                // If the balance is zero (Sapling transfer)
                return [ops, { ...storage, state: new_sapling_state }]
              }
            });
          }
        }),
        tx_list,
        [list([]), s]
      );
    });
};

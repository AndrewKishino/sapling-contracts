type parameter = list<sapling_transaction<8>>;

type storage = sapling_state<8>;

type return_ = [list<operation>, storage];

const main = ([tx_list, s]: [parameter, storage]): return_ => {
  const [ops, new_state, difference] =
    List.fold(([[ops, prev_state, budget], tx]: [[list<operation>, storage, tez], sapling_transaction<8>]) =>
      match(Tezos.sapling_verify_update(tx, prev_state), {
        None: () => { return failwith("INVALID_SAPLING_TX") },
        Some: (p: [bytes, [int, storage]]) => {
          const [bound_data, [tx_balance, new_sapling_state]] = p;
          const tx_balance_in_tez = (1 as mutez) * abs(tx_balance);
          if (tx_balance > 0) {
            return match(Bytes.unpack(bound_data) as option<key_hash>, {
              None: () => { return failwith("UNABLE_TO_UNPACK_RECIPIENT") },
              Some: (recipient_key_hash: key_hash) => {
                const recipient = Tezos.implicit_account(recipient_key_hash);
                const op = Tezos.transaction(unit, tx_balance_in_tez, recipient);
                return [list([op, ...ops]), new_sapling_state, budget];
              }
            })
          }
          return match(budget - tx_balance_in_tez, {
            None: () => { return failwith("INVALID_AMOUNT") },
            Some: (diff: nat) => {
              if (Bytes.length(bound_data) == (0 as nat)) {
                return failwith("UNEXPECTED_EMPTY_BOUND_DATA")
              }
              return [ops, new_sapling_state, diff];
            }
          })
        }
      }), tx_list, [list([]) as list<operation>, s, Tezos.get_amount()]);

  if (difference != (0 as mutez)) {
    return failwith("UNEXPECTED_REMAINDER");
  };

   return [ops, new_state];
};

// WARNING: This file is autogenerated and should NOT be modified
{
    "build": "1c8c6f4",
    "configHash": "1dd83bee12760770c6c7a011e04f568b6178b9676d660c3d6b5dec229a06f5e5",
    "tasks": {
        "generate types": {
            "type": "npm",
            "name": "@taqueria/plugin-contract-types"
        },
        "clean": {
            "type": "npm",
            "name": "@taqueria/plugin-core"
        },
        "start sandbox": {
            "type": "npm",
            "name": "@taqueria/plugin-flextesa"
        },
        "stop sandbox": {
            "type": "npm",
            "name": "@taqueria/plugin-flextesa"
        },
        "restart sandbox": {
            "type": "npm",
            "name": "@taqueria/plugin-flextesa"
        },
        "list accounts": {
            "type": "npm",
            "name": "@taqueria/plugin-flextesa"
        },
        "bake": {
            "type": "npm",
            "name": "@taqueria/plugin-flextesa"
        },
        "show protocols": {
            "type": "npm",
            "name": "@taqueria/plugin-flextesa"
        },
        "test": {
            "task": "test",
            "command": "test",
            "description": "Provided by more than one plugin. The option --plugin is required.",
            "handler": "proxy",
            "options": [
                {
                    "flag": "plugin",
                    "description": "Specify which plugin should be used to execute this task",
                    "required": true,
                    "choices": [
                        "@taqueria/plugin-jest",
                        "jest",
                        "@taqueria/plugin-ligo",
                        "ligo"
                    ]
                }
            ]
        },
        "ligo": {
            "type": "npm",
            "name": "@taqueria/plugin-ligo"
        },
        "compile": {
            "type": "npm",
            "name": "@taqueria/plugin-ligo"
        },
        "compile-all": {
            "type": "npm",
            "name": "@taqueria/plugin-ligo"
        },
        "get-image": {
            "task": "get-image",
            "command": "get-image",
            "description": "Provided by more than one plugin. The option --plugin is required.",
            "hidden": true,
            "handler": "proxy",
            "options": [
                {
                    "flag": "plugin",
                    "description": "Specify which plugin should be used to execute this task",
                    "required": true,
                    "choices": [
                        "@taqueria/plugin-ligo",
                        "ligo",
                        "@taqueria/plugin-tezos-client",
                        "tezos-client"
                    ]
                }
            ]
        },
        "deploy": {
            "type": "npm",
            "name": "@taqueria/plugin-taquito"
        },
        "transfer": {
            "type": "npm",
            "name": "@taqueria/plugin-taquito"
        },
        "fund": {
            "type": "npm",
            "name": "@taqueria/plugin-taquito"
        },
        "instantiate-account": {
            "type": "npm",
            "name": "@taqueria/plugin-taquito"
        },
        "client": {
            "type": "npm",
            "name": "@taqueria/plugin-tezos-client"
        },
        "typecheck": {
            "type": "npm",
            "name": "@taqueria/plugin-tezos-client"
        },
        "typecheck-all": {
            "type": "npm",
            "name": "@taqueria/plugin-tezos-client"
        },
        "simulate": {
            "type": "npm",
            "name": "@taqueria/plugin-tezos-client"
        }
    },
    "operations": {},
    "templates": {
        "contract-test": {
            "type": "npm",
            "name": "@taqueria/plugin-jest"
        },
        "contract": {
            "type": "npm",
            "name": "@taqueria/plugin-ligo"
        }
    },
    "plugins": [
        {
            "name": "@taqueria/plugin-contract-types",
            "version": "0.1",
            "schema": "1.0",
            "alias": "contract-types",
            "tasks": [
                {
                    "task": "generate types",
                    "command": "generate types [typescriptDir]",
                    "aliases": [
                        "gen types",
                        "gentypes"
                    ],
                    "description": "Generate types for a contract to be used with taquito",
                    "handler": "proxy",
                    "options": [
                        {
                            "shortFlag": "t",
                            "flag": "typeAliasMode",
                            "description": "The type aliases used in the generated types",
                            "choices": [
                                "file",
                                "simple"
                            ]
                        }
                    ],
                    "positionals": [
                        {
                            "placeholder": "typescriptDir",
                            "description": "The output directory for the generated type files",
                            "defaultValue": "types"
                        }
                    ]
                }
            ],
            "operations": [],
            "templates": []
        },
        {
            "name": "@taqueria/plugin-core",
            "version": "0.1",
            "schema": "1.0",
            "alias": "core",
            "tasks": [
                {
                    "task": "clean",
                    "command": "clean",
                    "description": "Clean all the Taqueria-related docker images",
                    "encoding": "application/json",
                    "handler": "proxy"
                }
            ],
            "operations": [],
            "templates": []
        },
        {
            "name": "@taqueria/plugin-flextesa",
            "version": "0.1",
            "schema": "1.0",
            "alias": "flextesa",
            "tasks": [
                {
                    "task": "start sandbox",
                    "command": "start sandbox",
                    "aliases": [
                        "start flextesa"
                    ],
                    "description": "Starts a flextesa sandbox",
                    "encoding": "none",
                    "handler": "proxy",
                    "options": []
                },
                {
                    "task": "stop sandbox",
                    "command": "stop sandbox",
                    "aliases": [
                        "stop flextesa"
                    ],
                    "description": "Stops a flextesa sandbox",
                    "handler": "proxy",
                    "options": []
                },
                {
                    "task": "restart sandbox",
                    "command": "restart sandbox",
                    "aliases": [
                        "restart flextesa"
                    ],
                    "description": "Restarts a flextesa sandbox",
                    "handler": "proxy",
                    "options": []
                },
                {
                    "task": "list accounts",
                    "command": "list accounts",
                    "aliases": [],
                    "description": "List the balances of all sandbox accounts",
                    "encoding": "json",
                    "handler": "proxy",
                    "options": []
                },
                {
                    "task": "bake",
                    "command": "bake",
                    "aliases": [
                        "b"
                    ],
                    "description": "Manually bake a block. Use when the \"baking\" setting of a flextesa sandbox is set to \"disabled\".",
                    "encoding": "none",
                    "handler": "proxy",
                    "options": [
                        {
                            "shortFlag": "w",
                            "flag": "watch",
                            "description": "Watch for operations as they are injected into the mempool and bake them as immediate as possible.",
                            "boolean": true
                        }
                    ]
                },
                {
                    "task": "show protocols",
                    "command": "show protocols",
                    "aliases": [
                        "list protocols"
                    ],
                    "description": "List protocols understood by this version of Flextesa",
                    "encoding": "json",
                    "handler": "proxy",
                    "options": []
                }
            ],
            "operations": [],
            "templates": []
        },
        {
            "name": "@taqueria/plugin-jest",
            "version": "0.4.0",
            "schema": "0.1",
            "alias": "jest",
            "tasks": [
                {
                    "task": "test",
                    "command": "test [partition]",
                    "aliases": [
                        "jest"
                    ],
                    "description": "Setup a directory as a partition to run Jest tests",
                    "handler": "proxy",
                    "options": [
                        {
                            "shortFlag": "i",
                            "flag": "init",
                            "description": "Initializes the partition for Jest",
                            "boolean": true
                        },
                        {
                            "shortFlag": "t",
                            "flag": "testPattern",
                            "description": "Run test files that match the provided pattern"
                        }
                    ],
                    "positionals": [
                        {
                            "placeholder": "partition",
                            "description": "Name of the partition for these tests",
                            "defaultValue": "tests",
                            "type": "string"
                        }
                    ]
                }
            ],
            "operations": [],
            "templates": [
                {
                    "template": "contract-test",
                    "command": "contract-test <michelsonArtifact>",
                    "description": "Generate integration test for a contract",
                    "options": [
                        {
                            "flag": "partition",
                            "description": "Partition to place generated test suite",
                            "defaultValue": "tests",
                            "type": "string"
                        }
                    ],
                    "positionals": [
                        {
                            "placeholder": "michelsonArtifact",
                            "description": "Name of the michelson contract (artifact) to generate tests for",
                            "type": "string",
                            "required": true
                        }
                    ],
                    "handler": "function"
                }
            ]
        },
        {
            "name": "@taqueria/plugin-ligo",
            "version": "0.1",
            "schema": "1.0",
            "alias": "ligo",
            "tasks": [
                {
                    "task": "ligo",
                    "command": "ligo",
                    "description": "This task allows you to run arbitrary LIGO native commands. Note that they might not benefit from the abstractions provided by Taqueria",
                    "encoding": "none",
                    "handler": "proxy",
                    "options": [
                        {
                            "shortFlag": "c",
                            "flag": "command",
                            "description": "The command to be passed to the underlying LIGO binary, wrapped in quotes",
                            "type": "string",
                            "required": true
                        }
                    ]
                },
                {
                    "task": "compile",
                    "command": "compile <sourceFile>",
                    "aliases": [
                        "c",
                        "compile-ligo"
                    ],
                    "description": "Compile a smart contract written in a LIGO syntax to Michelson code, along with its associated storage/parameter list files if they are found",
                    "encoding": "json",
                    "handler": "proxy",
                    "options": [
                        {
                            "flag": "json",
                            "description": "Emit JSON-encoded Michelson",
                            "boolean": true
                        }
                    ]
                },
                {
                    "task": "compile-all",
                    "command": "compile-all",
                    "description": "Compile all main smart contracts written in a LIGO syntax to Michelson code, along with their associated storage/parameter list files if they are found",
                    "encoding": "json",
                    "handler": "proxy",
                    "options": [
                        {
                            "flag": "json",
                            "description": "Emit JSON-encoded Michelson",
                            "boolean": true
                        }
                    ]
                },
                {
                    "task": "test",
                    "command": "test <sourceFile>",
                    "description": "Test a smart contract written in LIGO",
                    "encoding": "json",
                    "handler": "proxy"
                },
                {
                    "task": "get-image",
                    "command": "get-image",
                    "description": "Gets the name of the image to be used",
                    "hidden": true,
                    "handler": "proxy"
                }
            ],
            "operations": [],
            "templates": [
                {
                    "template": "contract",
                    "command": "contract <sourceFileName>",
                    "description": "Create a LIGO contract with boilerplate code",
                    "options": [
                        {
                            "shortFlag": "s",
                            "flag": "syntax",
                            "description": "The syntax used in the contract",
                            "type": "string"
                        }
                    ],
                    "positionals": [
                        {
                            "placeholder": "sourceFileName",
                            "description": "The name of the LIGO contract to generate",
                            "type": "string"
                        }
                    ],
                    "handler": "function"
                }
            ]
        },
        {
            "name": "@taqueria/plugin-taquito",
            "version": "0.1",
            "schema": "1.0",
            "alias": "taquito",
            "tasks": [
                {
                    "task": "deploy",
                    "command": "deploy <contract>",
                    "aliases": [
                        "originate"
                    ],
                    "description": "Deploy a smart contract to a particular environment",
                    "encoding": "application/json",
                    "handler": "proxy",
                    "options": [
                        {
                            "flag": "alias",
                            "description": "Alias used to refer to the deployed contract's address",
                            "required": false
                        },
                        {
                            "flag": "storage",
                            "description": "Name of the storage file that contains the storage value as a Michelson expression, in the artifacts directory, used for originating a contract",
                            "required": false
                        },
                        {
                            "flag": "sender",
                            "description": "Name of an instantiated account to use as the sender of the originate operation",
                            "required": false
                        },
                        {
                            "flag": "mutez",
                            "description": "Amount of Mutez to transfer",
                            "required": false
                        },
                        {
                            "shortFlag": "t",
                            "flag": "timeout",
                            "description": "Number of retry attempts (to avoid congestion and network failures)",
                            "defaultValue": 40,
                            "required": false
                        }
                    ]
                },
                {
                    "task": "transfer",
                    "command": "transfer <contract>",
                    "aliases": [
                        "call"
                    ],
                    "description": "Transfer/call an implicit account or a smart contract (specified via its alias or address) deployed to a particular environment",
                    "encoding": "application/json",
                    "handler": "proxy",
                    "options": [
                        {
                            "flag": "mutez",
                            "description": "Amount of Mutez to transfer",
                            "required": false
                        },
                        {
                            "flag": "param",
                            "description": "Name of the parameter file that contains the parameter value as a Michelson expression, in the artifacts directory, used for invoking a deployed contract",
                            "required": false
                        },
                        {
                            "flag": "entrypoint",
                            "description": "You may explicitly specify an entrypoint to make the parameter value shorter, without having to specify a chain of (Left (Right ... 14 ...))",
                            "required": false
                        },
                        {
                            "flag": "sender",
                            "description": "Name of an instantiated account to use as the sender of the transfer operation",
                            "required": false
                        },
                        {
                            "shortFlag": "t",
                            "flag": "timeout",
                            "description": "Number of retry attempts (to avoid congestion and network failures)",
                            "defaultValue": 40,
                            "required": false
                        }
                    ]
                },
                {
                    "task": "fund",
                    "command": "fund",
                    "description": "Fund all the instantiated accounts up to the desired/declared amount in a target environment",
                    "encoding": "application/json",
                    "handler": "proxy",
                    "options": [
                        {
                            "shortFlag": "t",
                            "flag": "timeout",
                            "description": "Number of retry attempts (to avoid congestion and network failures)",
                            "defaultValue": 40,
                            "required": false
                        }
                    ]
                },
                {
                    "task": "instantiate-account",
                    "command": "instantiate-account",
                    "description": "Instantiate all accounts declared in the \"accounts\" field at the root level of the config file to a target environment",
                    "encoding": "application/json",
                    "handler": "proxy"
                }
            ],
            "operations": [],
            "templates": []
        },
        {
            "name": "@taqueria/plugin-tezos-client",
            "version": "0.1",
            "schema": "1.0",
            "alias": "tezos-client",
            "tasks": [
                {
                    "task": "client",
                    "command": "client",
                    "description": "This task allows you to run arbitrary octez-client native commands. Note that they might not benefit from the abstractions provided by Taqueria",
                    "encoding": "none",
                    "handler": "proxy",
                    "options": [
                        {
                            "shortFlag": "c",
                            "flag": "command",
                            "description": "The command to be passed to the underlying octez-client binary, wrapped in quotes",
                            "type": "string",
                            "required": true
                        }
                    ]
                },
                {
                    "task": "typecheck",
                    "command": "typecheck <sourceFile>",
                    "aliases": [
                        "tc"
                    ],
                    "description": "Typecheck a Michelson contract",
                    "encoding": "json",
                    "handler": "proxy",
                    "positionals": [
                        {
                            "placeholder": "sourceFile",
                            "description": "The name of the Michelson contract you wish to typecheck"
                        }
                    ]
                },
                {
                    "task": "typecheck-all",
                    "command": "typecheck-all",
                    "description": "Typecheck all Michelson contracts in the artifacts directory",
                    "encoding": "json",
                    "handler": "proxy"
                },
                {
                    "task": "simulate",
                    "command": "simulate <sourceFile>",
                    "aliases": [
                        "sim"
                    ],
                    "description": "Run a Michelson contract as a simulation",
                    "encoding": "json",
                    "handler": "proxy",
                    "options": [
                        {
                            "flag": "storage",
                            "description": "Name of the storage file that contains the storage value as a Michelson expression, in the artifacts directory, used for originating a contract",
                            "required": false
                        },
                        {
                            "flag": "param",
                            "description": "Name of the parameter file that contains the parameter value as a Michelson expression, in the artifacts directory, used for invoking a deployed contract",
                            "required": true
                        },
                        {
                            "flag": "entrypoint",
                            "description": "You may explicitly specify an entrypoint to make the parameter value shorter, without having to specify a chain of (Left (Right ... 14 ...))",
                            "required": false
                        }
                    ],
                    "positionals": [
                        {
                            "placeholder": "sourceFile",
                            "description": "The name of the Michelson contract you wish to simulate"
                        }
                    ]
                },
                {
                    "task": "get-image",
                    "command": "get-image",
                    "description": "Gets the name of the image to be used",
                    "hidden": true,
                    "handler": "proxy"
                }
            ],
            "operations": [],
            "templates": []
        }
    ]
}